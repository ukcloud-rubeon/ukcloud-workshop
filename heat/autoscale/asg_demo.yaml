heat_template_version: 2014-10-16

description: >
  This is a very simple template that illustrates automatic scaling up and down
  using OS::Heat::AutoScalingGroup. CPU load is generated for
  15 mins after each instance is spawned, triggering a scale-up event.
  Once the max number of instances has been reached and the CPU
  load generation has finished, the number of instances will be scaled
  back down to 1.
parameters:
  key_name:
    type: string
    description: Keypair for authentication
  flavor:
    type: string
    description: Flavor of the servers
  image:
    type: string
    description: Image used to boot the servers
  public_net_id:
    type: string
    label: Public network ID
    description: ID of the public network to use

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: private_net
  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: private_subnet
      cidr: 192.168.10.0/24
      dns_nameservers: [8.8.8.8, 8.8.4.4]
      enable_dhcp: true
      network_id: { get_resource: private_net }
  router:
    type: OS::Neutron::Router
    properties:
      name: router
      admin_state_up: true
  router_gw:
    type: OS::Neutron::RouterGateway
    properties:
      network_id: { get_param: public_net_id }
      router_id: { get_resource: router }
  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  cloud_config_stress:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        packages:
          - stress
          - joe
          - wget
        runcmd:
          - stress --cpu 2 --timeout 15m

  asg_volume:
      type: OS::Heat::AutoScalingGroup
      properties:
          cooldown: 300
          min_size: 2
          desired_capacity: 2
          max_size: 10
          resource:
              type: OS::Cinder::Volume
              properties:
                  size: 30

  asg:
    type: OS::Heat::AutoScalingGroup
    depends_on: private_subnet
    properties:
      cooldown: 300
      min_size: 2
      desired_capacity: 2
      max_size: 10
      resource:
        type: OS::Nova::Server
        properties:
          key_name: {get_param: key_name}
          flavor: {get_param: flavor}
          image: {get_param: image}
          networks:
            - network: { get_resource: private_net }
          metadata:
              metering.server_group:
                  get_param: OS::stack_id
          user_data_format: RAW
          user_data:
            get_resource: cloud_config_stress


  scale_up_policy_vol:
      type: OS::Heat::ScalingPolicy
      properties:
        adjustment_type: change_in_capacity
        auto_scaling_group_id:
            get_resource: asg_volume
        cooldown: 60
        scaling_adjustment: 1

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id:
          get_resource: asg
      cooldown: 60
      scaling_adjustment: '-1'

  cpu_alarm_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if CPU > 80%
      metric: cpu_util
      aggregation_method: max
      granularity: 300
      evaluation_periods: 1
      threshold: 80
      resource_type: instance
      comparison_operator: gt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [scale_up_policy, signal_url]}
      query:
          str_replace:
              template: '{"=": {"server_group": "stack_id"}}'
              params:
                  stack_id: {get_param: "OS::stack_id"}

  cpu_alarm_low:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale down if CPU < 15% for 5 minutes
      metric: cpu_util
      aggregation_method: max
      granularity: 300
      evaluation_periods: 1
      threshold: 15
      resource_type: instance
      comparison_operator: lt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [scale_down_policy, signal_url]}
      query:
          str_replace:
              template: '{"=": {"server_group": "stack_id"}}'
              params:
                  stack_id: {get_param: "OS::stack_id"}




outputs:
  scale_up_url_vol:
    description: >
      Webhook URL to scale up the group.
      You can invoke the scale-up operation by doing an HTTP POST to this URL.
    value:
        get_attr:
            - scale_up_policy_vol
            - alarm_url
  scale_up_url:
    description: >
      Webhook URL to scale up the group.
      You can invoke the scale-up operation by doing an HTTP POST to this URL.
    value: {get_attr: [scale_up_policy, alarm_url]}
  scale_dn_url:
    description: >
      Webhook URL to scale down the group.
      You can invoke the scale-down operation by doing an HTTP POST to this URL.
    value: {get_attr: [scale_down_policy, alarm_url]}
  server_list:
    description: >
      List of server names that are part of the group.
    value: {get_attr: [asg, outputs_list, name]}
  gnocchi_query:
    value:
      str_replace:
        template: >
          gnocchi measures aggregation --resource-type instance
          --query 'server_group="stackval"'
          --granularity 300 --aggregation mean -m cpu_util
        params:
          stackval: { get_param: "OS::stack_id" }
    description: >
          This is a Gnocchi query for statistics on the cpu_util measurements about
          OS::Nova::Server instances in this stack. The --resource-type select the
          type of Gnocchi resource. The --query parameter filters resources
          according to its attributes. When a VM's metadata includes an item of the
          form metering.server_group=X, the corresponding Gnocchi resource has a
          attribute named server_group that can queried with 'server_group="X"' In
          this case the nested stacks give their VMs metadata that is passed as a
          nested stack parameter, and this stack passes a metadata of the form
          metering.server_group=X, where X is this stack's ID.
